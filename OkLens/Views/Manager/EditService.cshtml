@model OkLens.Models.Service

<body>
    <header>
        <p>
            <h1  class="text-info">Редактировать</h1>

            <hr />
        </p>        
        <br/>
        <div class="row">
            <div class="col-md-4">
                <form asp-action="EditService">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="ServicesId"/>
                    <div class="form-group">
                        <input asp-for="Name" class="form-control" placeholder="Наименование"/>
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                    <br />
                    <div class="form-group">
                        <input asp-for="Price" class="form-control" placeholder="Стоимость"/>
                        <span asp-validation-for="Price" class="text-danger"></span>
                    </div>
                    <br />
                    <div class="form-group">
                        <input type="submit" value="Сохранить" class="btn btn-outline-primary" />
                    </div>
                </form>
            </div>
        </div>
        <br />
        <div>
        <a asp-action="ServiceList" class="btn btn-outline-primary">Назад</a>
        </div>

    </header>
</body>

@section Scripts {
    <script>
    // переопределение валидации на стороне клиента
    $.validator.methods.range = function (value, element, param) {
        var globalizedValue = value.replace(",", ".");
        return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
    }
 
    $.validator.methods.number = function (value, element) {
        return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
    }
    </script>
}